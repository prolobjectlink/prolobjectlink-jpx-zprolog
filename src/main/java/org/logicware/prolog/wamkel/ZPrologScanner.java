/*
 * #%L
 * prolobjectlink-db-wamkel
 * %%
 * Copyright (C) 2012 - 2017 Logicware Project
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
/* The following code was generated by JFlex 1.6.0 */

package org.logicware.prolog.wamkel;

import static org.logicware.prolog.wamkel.ZPrologOperator.FX;
import static org.logicware.prolog.wamkel.ZPrologOperator.FY;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_AFTER;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_AFTER_EQUALS;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BEFORE;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BEFORE_EQUALS;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BITWISE_AND;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BITWISE_COMPLEMENT;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BITWISE_OR;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BITWISE_SHIFT_LEFT;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BITWISE_SHIFT_RIGHT;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_BITWISE_XOR;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_DIV;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_EQUAL;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_EQUIVALENT;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_FLOAT_POW;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_GREATER;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_GREATER_EQUAL;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_INTEGER_DIV;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_INT_FLOAT_POW;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_IS;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_LESS;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_LESS_EQUAL;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_MINUS;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_MOD;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_NOT;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_NOT_EQUAL;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_NOT_EQUIVALENT;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_NOT_UNIFY;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_PLUS;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_QUERY;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_REM;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_TIMES;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_UNIFY;
import static org.logicware.prolog.wamkel.ZPrologOperator.TOKEN_UNIV;
import static org.logicware.prolog.wamkel.ZPrologOperator.XFX;
import static org.logicware.prolog.wamkel.ZPrologOperator.XFY;
import static org.logicware.prolog.wamkel.ZPrologOperator.YFX;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_ANONIM;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_ATOM;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_BAR;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_CARRIAGE_RETURN;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_COMMA;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_CUT;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_DOT;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_EOF;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_ERROR;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_FLOAT;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_FORM_FEED;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_IF_THEN;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_INTEGER;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_LBRACKET;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_LCURLY;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_LPAR;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_NECK;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_NEW_LINE;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_RBRACKET;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_RCURLY;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_RPAR;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_SEMICOLON;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_SPACE;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_TAB;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_VARIABLE;
import static org.logicware.prolog.wamkel.ZPrologToken.TOKEN_WORD_BOUNDARY;

import java.util.HashMap;
import java.util.Map;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.6.0 from the specification file
 * <tt>${basedir}/src/main/jflex/ZPrologScanner.flex</tt>
 */

@SuppressWarnings("all")
class ZPrologScanner {

	/** This character denotes the end of file */
	public static final int YYEOF = -1;

	/** initial size of the lookahead buffer */
	private static final int ZZ_BUFFERSIZE = 16384;

	/** lexical states */
	public static final int YYINITIAL = 0;
	public static final int NORMALSTATE = 2;
	public static final int ERRORSTATE = 4;

	/**
	 * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
	 * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
	 * beginning of a line l is of the form l = 2*k, k a non negative integer
	 */
	private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1, 2, 2 };

	/**
	 * Translates characters to character classes
	 */
	private static final String ZZ_CMAP_PACKED = "\10\0\1\56\1\14\1\2\1\6\1\7\1\1\22\0\1\55\1\20"
			+ "\1\0\1\53\1\0\1\17\1\0\1\5\1\22\1\23\1\16\1\36" + "\1\35\1\31\1\13\1\15\1\12\11\4\1\32\1\33\1\40\1\37"
			+ "\1\34\1\30\1\43\32\11\1\24\1\10\1\25\1\52\1\54\1\0" + "\3\3\1\50\1\51\3\3\1\41\3\3\1\47\1\3\1\45\2\3"
			+ "\1\46\1\42\4\3\1\44\2\3\1\26\1\21\1\27\7\0\1\6"
			+ "\u1fa2\0\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

	/**
	 * Translates characters to character classes
	 */
	private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

	/**
	 * Translates DFA states to action switch labels.
	 */
	private static final int[] ZZ_ACTION = zzUnpackAction();

	private static final String ZZ_ACTION_PACKED_0 = "\3\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"
			+ "\1\7\1\10\1\5\1\11\1\12\1\13\1\14\1\15" + "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"
			+ "\1\26\1\27\1\1\1\30\1\31\1\32\1\33\1\34" + "\1\35\1\4\1\26\3\4\1\36\1\26\1\37\1\40"
			+ "\1\41\1\42\1\43\2\0\1\44\1\45\1\46\1\0" + "\1\47\1\50\1\0\1\51\2\15\1\52\1\53\1\54"
			+ "\1\55\1\56\1\57\3\0\1\60\1\61\1\62\1\63" + "\1\64\1\0\1\65\3\4\1\66\2\0\1\67\1\0"
			+ "\1\70\1\71\1\72\1\73\1\74\1\57\1\75\1\76" + "\1\26";

	private static int[] zzUnpackAction() {
		int[] result = new int[92];
		int offset = 0;
		offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAction(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/**
	 * Translates a state to a row index in the transition table
	 */
	private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

	private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\57\0\136\0\0\0\0\0\0\0\215\0\274"
			+ "\0\353\0\0\0\u011a\0\u0149\0\u0178\0\0\0\0\0\u01a7" + "\0\u01d6\0\u0205\0\0\0\0\0\0\0\0\0\0\0\0"
			+ "\0\0\0\0\0\u0234\0\u0263\0\u0292\0\0\0\u02c1\0\0"
			+ "\0\0\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"
			+ "\0\0\0\0\0\u0149\0\0\0\0\0\0\0\0\0\u0439" + "\0\u0468\0\0\0\0\0\u0497\0\u0178\0\0\0\0\0\u04c6"
			+ "\0\0\0\u04f5\0\0\0\0\0\0\0\0\0\0\0\0" + "\0\0\0\u0524\0\u0553\0\u0582\0\0\0\0\0\0\0\215"
			+ "\0\u05b1\0\u05e0\0\0\0\u060f\0\u063e\0\u066d\0\u0439\0\u069c"
			+ "\0\u06cb\0\0\0\u06fa\0\0\0\0\0\0\0\0\0\0" + "\0\215\0\215\0\215\0\u06cb";

	private static int[] zzUnpackRowMap() {
		int[] result = new int[92];
		int offset = 0;
		offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackRowMap(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int high = packed.charAt(i++) << 16;
			result[j++] = high | packed.charAt(i++);
		}
		return j;
	}

	/**
	 * The transition table of the DFA
	 */
	private static final int[] ZZ_TRANS = zzUnpackTrans();

	private static final String ZZ_TRANS_PACKED_0 = "\57\0\1\4\1\5\1\6\1\7\1\10\1\11\1\0"
			+ "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21" + "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"
			+ "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41" + "\1\42\1\43\1\44\1\7\1\45\1\46\1\7\1\47"
			+ "\1\50\2\7\1\51\1\52\1\53\1\54\1\55\1\56" + "\2\0\3\56\2\0\3\56\1\57\43\56\3\0\2\7"
			+ "\4\0\2\7\26\0\2\7\1\0\6\7\2\0\1\7" + "\6\0\1\10\5\0\1\10\1\60\43\0\1\61\2\0"
			+ "\3\61\2\0\47\61\15\0\1\62\20\0\1\63\1\64" + "\22\0\2\14\4\0\2\14\26\0\2\14\1\0\6\14"
			+ "\2\0\1\14\6\0\1\65\5\0\1\65\1\60\53\0" + "\1\66\4\0\1\67\1\70\56\0\1\71\40\0\1\22"
			+ "\1\72\1\73\54\22\31\0\1\74\61\0\1\75\53\0" + "\1\76\61\0\1\77\2\0\1\100\1\101\26\0\1\102"
			+ "\2\0\1\103\16\0\1\104\4\0\1\105\1\106\56\0" + "\1\107\21\0\2\7\4\0\2\7\26\0\1\7\1\110"
			+ "\1\0\6\7\2\0\1\7\36\0\1\111\2\0\1\112" + "\1\113\21\0\2\7\4\0\2\7\26\0\2\7\1\0"
			+ "\1\7\1\114\4\7\2\0\1\7\5\0\2\7\4\0" + "\2\7\26\0\2\7\1\0\5\7\1\115\2\0\1\7"
			+ "\5\0\2\7\4\0\2\7\26\0\2\7\1\0\1\7" + "\1\116\4\7\2\0\1\7\6\0\1\117\5\0\1\117"
			+ "\44\0\1\120\2\0\2\120\1\121\2\61\1\121\46\120" + "\37\0\1\122\17\0\16\70\1\123\40\70\2\0\1\73"
			+ "\113\0\1\124\32\0\1\125\102\0\1\126\56\0\1\127" + "\57\0\1\130\21\0\2\7\4\0\2\7\26\0\2\7"
			+ "\1\0\2\7\1\131\3\7\2\0\1\7\5\0\2\7" + "\4\0\2\7\26\0\2\7\1\0\3\7\1\132\2\7"
			+ "\2\0\1\7\5\0\2\7\4\0\2\7\26\0\2\7" + "\1\0\4\7\1\133\1\7\2\0\1\7\2\0\1\120"
			+ "\2\0\2\120\1\134\2\61\1\121\46\120\5\0\1\52" + "\51\0\15\70\1\73\1\123\40\70";

	private static int[] zzUnpackTrans() {
		int[] result = new int[1833];
		int offset = 0;
		offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackTrans(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			value--;
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/* error codes */
	private static final int ZZ_UNKNOWN_ERROR = 0;
	private static final int ZZ_NO_MATCH = 1;
	private static final int ZZ_PUSHBACK_2BIG = 2;

	/* error messages for the codes above */
	private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
			"Error: pushback value was too large" };

	/**
	 * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
	 */
	private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

	private static final String ZZ_ATTRIBUTE_PACKED_0 = "\1\10\2\0\3\11\3\1\1\11\3\1\2\11\3\1"
			+ "\10\11\3\1\1\11\1\1\2\11\7\1\2\11\1\1" + "\4\11\2\0\2\11\1\1\1\0\2\11\1\0\1\11"
			+ "\1\1\7\11\3\0\3\11\2\1\1\0\1\11\4\1" + "\2\0\1\11\1\0\5\11\4\1";

	private static int[] zzUnpackAttribute() {
		int[] result = new int[92];
		int offset = 0;
		offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
		return result;
	}

	private static int zzUnpackAttribute(String packed, int offset, int[] result) {
		int i = 0; /* index in packed string */
		int j = offset; /* index in unpacked array */
		int l = packed.length();
		while (i < l) {
			int count = packed.charAt(i++);
			int value = packed.charAt(i++);
			do
				result[j++] = value;
			while (--count > 0);
		}
		return j;
	}

	/** the input device */
	private java.io.Reader zzReader;

	/** the current state of the DFA */
	private int zzState;

	/** the current lexical state */
	private int zzLexicalState = YYINITIAL;

	/**
	 * this buffer contains the current text to be matched and is the source of the
	 * yytext() string
	 */
	private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

	/** the textposition at the last accepting state */
	private int zzMarkedPos;

	/** the current text position in the buffer */
	private int zzCurrentPos;

	/** startRead marks the beginning of the yytext() string in the buffer */
	private int zzStartRead;

	/**
	 * endRead marks the last character in the buffer, that has been read from input
	 */
	private int zzEndRead;

	/** number of newlines encountered up to the start of the matched text */
	private int yyline;

	/** the number of characters up to the start of the matched text */
	private int yychar;

	/**
	 * the number of characters from the last newline up to the start of the matched
	 * text
	 */
	private int yycolumn;

	/**
	 * zzAtBOL == true <=> the scanner is currently at the beginning of a line
	 */
	private boolean zzAtBOL = true;

	/** zzAtEOF == true <=> the scanner is at the EOF */
	private boolean zzAtEOF;

	/** denotes if the user-EOF-code has already been executed */
	private boolean zzEOFDone;

	/**
	 * The number of occupied positions in zzBuffer beyond zzEndRead. When a
	 * lead/high surrogate has been read from the input stream into the final
	 * zzBuffer position, this will have a value of 1; otherwise, it will have a
	 * value of 0.
	 */
	private int zzFinalHighSurrogate = 0;

	/* user code: */

	private static final Map<String, Integer> builtins;
	static {

		builtins = new HashMap<String, Integer>();

		// 7.4 directives
		builtins.put(ZPrologBuiltin.DYNAMIC, ZPrologToken.TOKEN_DYNAMIC_BUILTIN);
		builtins.put(ZPrologBuiltin.INCLUDE, ZPrologToken.TOKEN_INCLUDE_BUILTIN);
		builtins.put(ZPrologBuiltin.MULTIFILE, ZPrologToken.TOKEN_MULTIFILE_BUILTIN);
		builtins.put(ZPrologBuiltin.SET_PROLOG_FLAG, ZPrologToken.TOKEN_SET_PROLOG_FLAG_BUILTIN);
		builtins.put(ZPrologBuiltin.ENSURE_LOADED, ZPrologToken.TOKEN_ENSURE_LOADED_BUILTIN);
		builtins.put(ZPrologBuiltin.DISCONTIGUOUS, ZPrologToken.TOKEN_DISCONTIGUOUS_BUILTIN);
		builtins.put(ZPrologBuiltin.CURRENT_PROLOG_FLAG, ZPrologToken.TOKEN_CURRENT_PROLOG_FLAG_BUILTIN);
		builtins.put(ZPrologBuiltin.INITIALIZATION, ZPrologToken.TOKEN_INITIALIZATION_BUILTIN);

		// 7.8 control
		builtins.put(ZPrologBuiltin.NIL, ZPrologToken.TOKEN_NIL);
		builtins.put(ZPrologBuiltin.FAIL_FUNCTOR, ZPrologToken.TOKEN_FAIL);
		builtins.put(ZPrologBuiltin.TRUE_FUNCTOR, ZPrologToken.TOKEN_TRUE);
		builtins.put(ZPrologBuiltin.FALSE_FUNCTOR, ZPrologToken.TOKEN_FALSE);
		builtins.put(ZPrologBuiltin.THROW, ZPrologToken.TOKEN_THROW_BUILTIN);

		// 8.2 term unification
		builtins.put(ZPrologBuiltin.UNIFY_WITH_OCCURS_CHECK, ZPrologToken.TOKEN_UNIFY_WITH_OCCURS_CHECK_BUILTIN);

		// 8.3 type testing
		builtins.put(ZPrologBuiltin.VAR, ZPrologToken.TOKEN_VAR_BUILTIN);
		builtins.put(ZPrologBuiltin.ATOM, ZPrologToken.TOKEN_ATOM_BUILTIN);
		builtins.put(ZPrologBuiltin.FLOAT, ZPrologToken.TOKEN_FLOAT_BUILTIN);
		builtins.put(ZPrologBuiltin.NUMBER, ZPrologToken.TOKEN_NUMBER_BUILTIN);
		builtins.put(ZPrologBuiltin.NONVAR, ZPrologToken.TOKEN_NONVAR_BUILTIN);
		builtins.put(ZPrologBuiltin.OBJECT, ZPrologToken.TOKEN_OBJECT);
		builtins.put(ZPrologBuiltin.GROUND, ZPrologToken.TOKEN_GROUND);
		builtins.put(ZPrologBuiltin.ATOMIC, ZPrologToken.TOKEN_ATOMIC_BUILTIN);
		builtins.put(ZPrologBuiltin.INTEGER, ZPrologToken.TOKEN_INTEGER_BUILTIN);
		builtins.put(ZPrologBuiltin.COMPOUND, ZPrologToken.TOKEN_COMPOUND_BUILTIN);
		builtins.put(ZPrologBuiltin.CALLABLE, ZPrologToken.TOKEN_CALLABLE);
		builtins.put(ZPrologBuiltin.CYCLIC_TERM, ZPrologToken.TOKEN_CYCLIC_TERM);
		builtins.put(ZPrologBuiltin.ACYCLIC_TERM, ZPrologToken.TOKEN_ACYCLIC_TERM);

		// 8.4 term comparison
		builtins.put(ZPrologBuiltin.SORT, ZPrologToken.TOKEN_SORT);
		builtins.put(ZPrologBuiltin.COMPARE, ZPrologToken.TOKEN_COMPARE);

		// 8.5 term creation and decomposition
		builtins.put(ZPrologBuiltin.ARG, ZPrologToken.TOKEN_ARG_BUILTIN);
		builtins.put(ZPrologBuiltin.FUNCTOR, ZPrologToken.TOKEN_FUNCTOR_BUILTIN);
		builtins.put(ZPrologBuiltin.COPY_TERM, ZPrologToken.TOKEN_COPY_TERM_BUILTIN);
		builtins.put(ZPrologBuiltin.TERM_VARIABLES, ZPrologToken.TOKEN_TERM_VARIABLES);

		// 8.6 arithmetic evaluation (operator)
		// 8.7 arithmetic comparison (operator)

		// 8.8 clause retrieval and information
		builtins.put(ZPrologBuiltin.CLAUSE, ZPrologToken.TOKEN_CLAUSE_BUILTIN);
		builtins.put(ZPrologBuiltin.CURRENT_PREDICATE, ZPrologToken.TOKEN_CURRENT_PREDICATE_BUILTIN);

		// 8.9 clause creation and destruction
		builtins.put(ZPrologBuiltin.ABOLISH, ZPrologToken.TOKEN_ABOLISH);
		builtins.put(ZPrologBuiltin.ASSERTA, ZPrologToken.TOKEN_ASSERTA);
		builtins.put(ZPrologBuiltin.ASSERTZ, ZPrologToken.TOKEN_ASSERTZ);
		builtins.put(ZPrologBuiltin.RETRACT, ZPrologToken.TOKEN_RETRACT);

		// 8.10 All solutions
		builtins.put(ZPrologBuiltin.BAGOF, ZPrologToken.TOKEN_BAGOF_BUILTIN);
		builtins.put(ZPrologBuiltin.SETOF, ZPrologToken.TOKEN_SETOF_BUILTIN);
		builtins.put(ZPrologBuiltin.FINDALL, ZPrologToken.TOKEN_FINDALL_BUILTIN);

		// 8.11 Stream Selection and Control
		builtins.put(ZPrologBuiltin.OPEN, ZPrologToken.TOKEN_OPEN);
		builtins.put(ZPrologBuiltin.CLOSE, ZPrologToken.TOKEN_CLOSE);
		builtins.put(ZPrologBuiltin.SET_INPUT, ZPrologToken.TOKEN_SET_INPUT);
		builtins.put(ZPrologBuiltin.SET_OUTPUT, ZPrologToken.TOKEN_SET_OUTPUT);
		builtins.put(ZPrologBuiltin.CURRENT_INPUT, ZPrologToken.TOKEN_CURRENT_INPUT);
		builtins.put(ZPrologBuiltin.CURRENT_OUTPUT, ZPrologToken.TOKEN_CURRENT_OUTPUT);

		// 8.12 character input/output
		// 8.13 byte input/output

		// 8.14 Term input/output
		builtins.put(ZPrologBuiltin.NL, ZPrologToken.TOKEN_NL);
		builtins.put(ZPrologBuiltin.READ, ZPrologToken.TOKEN_READ);
		builtins.put(ZPrologBuiltin.WRITE, ZPrologToken.TOKEN_WRITE);

		// 8.15 logic and control
		builtins.put(ZPrologBuiltin.CALL, ZPrologToken.TOKEN_CALL);
		builtins.put(ZPrologBuiltin.ONCE, ZPrologToken.TOKEN_ONCE);
		builtins.put(ZPrologBuiltin.REPEAT, ZPrologToken.TOKEN_REPEAT);

		// 8.16 atomic term processing
		builtins.put(ZPrologBuiltin.SUB_ATOM, ZPrologToken.TOKEN_SUB_ATOM_BUILTIN);
		builtins.put(ZPrologBuiltin.CHAR_CODE, ZPrologToken.TOKEN_CHAR_CODE_BUILTIN);
		builtins.put(ZPrologBuiltin.ATOM_CHARS, ZPrologToken.TOKEN_ATOM_CHARS_BUILTIN);
		builtins.put(ZPrologBuiltin.ATOM_CODES, ZPrologToken.TOKEN_ATOM_CODES_BUILTIN);
		builtins.put(ZPrologBuiltin.ATOM_LENGTH, ZPrologToken.TOKEN_ATOM_LENGTH_BUILTIN);
		builtins.put(ZPrologBuiltin.ATOM_CONCAT, ZPrologToken.TOKEN_ATOM_CONCAT_BUILTIN);
		builtins.put(ZPrologBuiltin.NUMBER_CHARS, ZPrologToken.TOKEN_NUMBER_CHARS_BUILTIN);
		builtins.put(ZPrologBuiltin.NUMBER_CODES, ZPrologToken.TOKEN_NUMBER_CODES_BUILTIN);

		// 8.17 Implementation defined hooks
		builtins.put(ZPrologBuiltin.OP, ZPrologToken.TOKEN_OP_BUILTIN);
		builtins.put(ZPrologBuiltin.HALT, ZPrologToken.TOKEN_HALT_BUILTIN);
		builtins.put(ZPrologBuiltin.CURRENT_OP, ZPrologToken.TOKEN_CURRENT_OP_BUILTIN);
		builtins.put(ZPrologBuiltin.CHAR_CONVERSION, ZPrologToken.TOKEN_CHAR_CONVERSION_BUILTIN);
		builtins.put(ZPrologBuiltin.CURRENT_CHAR_CONVERSION, ZPrologToken.TOKEN_CURRENT_CHAR_CONVERSION);

		// 9.X Valuable functors
		builtins.put(ZPrologBuiltin.E, ZPrologToken.TOKEN_E);
		builtins.put(ZPrologBuiltin.PI, ZPrologToken.TOKEN_PI);
		builtins.put(ZPrologBuiltin.ABS, ZPrologToken.TOKEN_ABS_BUILTIN);
		builtins.put(ZPrologBuiltin.EXP, ZPrologToken.TOKEN_EXP_BUILTIN);
		builtins.put(ZPrologBuiltin.LOG, ZPrologToken.TOKEN_LOG_BUILTIN);
		builtins.put(ZPrologBuiltin.SIN, ZPrologToken.TOKEN_SIN_BUILTIN);
		builtins.put(ZPrologBuiltin.COS, ZPrologToken.TOKEN_COS_BUILTIN);
		builtins.put(ZPrologBuiltin.MAX, ZPrologToken.TOKEN_MAX);
		builtins.put(ZPrologBuiltin.MIN, ZPrologToken.TOKEN_MIN);
		builtins.put(ZPrologBuiltin.GCD, ZPrologToken.TOKEN_GCD);
		builtins.put(ZPrologBuiltin.LCM, ZPrologToken.TOKEN_LCM);
		builtins.put(ZPrologBuiltin.TAN, ZPrologToken.TOKEN_TAN);
		builtins.put(ZPrologBuiltin.ASIN, ZPrologToken.TOKEN_ASIN);
		builtins.put(ZPrologBuiltin.ACOS, ZPrologToken.TOKEN_ACOS);
		builtins.put(ZPrologBuiltin.ATAN, ZPrologToken.TOKEN_ATAN_BUILTIN);
		builtins.put(ZPrologBuiltin.SIGN, ZPrologToken.TOKEN_SIGN_BUILTIN);
		builtins.put(ZPrologBuiltin.SQRT, ZPrologToken.TOKEN_SQRT_BUILTIN);
		builtins.put(ZPrologBuiltin.CBRT, ZPrologToken.TOKEN_CBRT);
		builtins.put(ZPrologBuiltin.FLOOR, ZPrologToken.TOKEN_FLOOR_BUILTIN);
		builtins.put(ZPrologBuiltin.ROUND, ZPrologToken.TOKEN_ROUND_BUILTIN);
		builtins.put(ZPrologBuiltin.EPSILON, ZPrologToken.TOKEN_EPSILON);
		builtins.put(ZPrologBuiltin.CEILING, ZPrologToken.TOKEN_CEILING_BUILTIN);
		builtins.put(ZPrologBuiltin.TRUNCATE, ZPrologToken.TOKEN_TRUNCATE_BUILTIN);
		builtins.put(ZPrologBuiltin.FLOAT_INTEGER_PART, ZPrologToken.TOKEN_FLOAT_INTEGER_PART_BUILTIN);
		builtins.put(ZPrologBuiltin.FLOAT_FRACTIONAL_PART, ZPrologToken.TOKEN_FLOAT_FRACTIONAL_PART_BUILTIN);

		// non ISO

		// java foreign language
		builtins.put(ZPrologBuiltin.GET, ZPrologToken.TOKEN_GET);
		builtins.put(ZPrologBuiltin.SET, ZPrologToken.TOKEN_SET);
		builtins.put(ZPrologBuiltin.CAST, ZPrologToken.TOKEN_CAST);
		builtins.put(ZPrologBuiltin.INVOKE, ZPrologToken.TOKEN_INVOKE);
		builtins.put(ZPrologBuiltin.INSTANCE_OF, ZPrologToken.TOKEN_INSTANCE_OF);
		builtins.put(ZPrologBuiltin.NEW_INSTANCE, ZPrologToken.TOKEN_NEW_INSTANCE);
		builtins.put(ZPrologBuiltin.LOAD_LIBRARY, ZPrologToken.TOKEN_LOAD_LIBRARY);
		builtins.put(ZPrologBuiltin.OBJECT_CONVERSION, ZPrologToken.TOKEN_OBJECT_CONVERSION);

		// java runtime reflection
		builtins.put(ZPrologBuiltin.CLASS_OF, ZPrologToken.TOKEN_CLASS_OF);
		builtins.put(ZPrologBuiltin.FIELDS_OF, ZPrologToken.TOKEN_FIELDS_OF);
		builtins.put(ZPrologBuiltin.METHODS_OF, ZPrologToken.TOKEN_METHODS_OF);
		builtins.put(ZPrologBuiltin.SUPER_CLASS_OF, ZPrologToken.TOKEN_SUPER_CLASS_OF);
		builtins.put(ZPrologBuiltin.CONSTRUCTORS_OF, ZPrologToken.TOKEN_CONSTRUCTORS_OF);

		// runtime statistics
		builtins.put(ZPrologBuiltin.STATISTICS, ZPrologToken.TOKEN_STATISTICS);
		builtins.put(ZPrologBuiltin.CURRENT_TIME, ZPrologToken.TOKEN_CURRENT_TIME);

	}

	private ZPrologToken token(int type, String value) {
		return new ZPrologToken(type, yyline + 1, yycolumn + 1, yychar + 1, value);
	}

	private ZPrologOperator operator(int type, String value, int priority, int position) {
		return new ZPrologOperator(type, yyline + 1, yycolumn + 1, yychar + 1, value, priority, position);
	}

	/**
	 * Creates a new scanner There is also a java.io.InputStream version of this
	 * constructor.
	 *
	 * @param in the java.io.Reader to read input from.
	 */
	ZPrologScanner(java.io.Reader in) {
		yybegin(NORMALSTATE);
		this.zzReader = in;
	}

	/**
	 * Creates a new scanner. There is also java.io.Reader version of this
	 * constructor.
	 *
	 * @param in the java.io.Inputstream to read input from.
	 */
	ZPrologScanner(java.io.InputStream in) {
		this(new java.io.InputStreamReader(in, java.nio.charset.Charset.forName("UTF-8")));
	}

	/**
	 * Unpacks the compressed character translation table.
	 *
	 * @param packed the packed character translation table
	 * @return the unpacked character translation table
	 */
	private static char[] zzUnpackCMap(String packed) {
		char[] map = new char[0x110000];
		int i = 0; /* index in packed string */
		int j = 0; /* index in unpacked array */
		while (i < 160) {
			int count = packed.charAt(i++);
			char value = packed.charAt(i++);
			do
				map[j++] = value;
			while (--count > 0);
		}
		return map;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return <code>false</code>, iff there was new input.
	 * 
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	private boolean zzRefill() throws java.io.IOException {

		/* first: make room (if you can) */
		if (zzStartRead > 0) {
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
			System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

			/* translate stored positions */
			zzEndRead -= zzStartRead;
			zzCurrentPos -= zzStartRead;
			zzMarkedPos -= zzStartRead;
			zzStartRead = 0;
		}

		/* is the buffer big enough? */
		if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
			/* if not: blow it up */
			char newBuffer[] = new char[zzBuffer.length * 2];
			System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
			zzBuffer = newBuffer;
			zzEndRead += zzFinalHighSurrogate;
			zzFinalHighSurrogate = 0;
		}

		/* fill the buffer with new input */
		int requested = zzBuffer.length - zzEndRead;
		int totalRead = 0;
		while (totalRead < requested) {
			int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
			if (numRead == -1) {
				break;
			}
			totalRead += numRead;
		}

		if (totalRead > 0) {
			zzEndRead += totalRead;
			if (totalRead == requested) { /* possibly more input available */
				if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
					--zzEndRead;
					zzFinalHighSurrogate = 1;
				}
			}
			return false;
		}

		// totalRead = 0: End of stream
		return true;
	}

	/**
	 * Closes the input stream.
	 */
	public final void yyclose() throws java.io.IOException {
		zzAtEOF = true; /* indicate end of file */
		zzEndRead = zzStartRead; /* invalidate buffer */

		if (zzReader != null)
			zzReader.close();
	}

	/**
	 * Resets the scanner to read from a new input stream. Does not close the old
	 * reader.
	 *
	 * All internal variables are reset, the old input stream <b>cannot</b> be
	 * reused (internal buffer is discarded and lost). Lexical state is set to
	 * <tt>ZZ_INITIAL</tt>.
	 *
	 * Internal scan buffer is resized down to its initial length, if it has grown.
	 *
	 * @param reader the new input stream
	 */
	public final void yyreset(java.io.Reader reader) {
		zzReader = reader;
		zzAtBOL = true;
		zzAtEOF = false;
		zzEOFDone = false;
		zzEndRead = zzStartRead = 0;
		zzCurrentPos = zzMarkedPos = 0;
		zzFinalHighSurrogate = 0;
		yyline = yychar = yycolumn = 0;
		zzLexicalState = YYINITIAL;
		if (zzBuffer.length > ZZ_BUFFERSIZE)
			zzBuffer = new char[ZZ_BUFFERSIZE];
	}

	/**
	 * Returns the current lexical state.
	 */
	public final int yystate() {
		return zzLexicalState;
	}

	/**
	 * Enters a new lexical state
	 *
	 * @param newState the new lexical state
	 */
	public final void yybegin(int newState) {
		zzLexicalState = newState;
	}

	/**
	 * Returns the text matched by the current regular expression.
	 */
	public final String yytext() {
		return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
	}

	/**
	 * Returns the character at position <tt>pos</tt> from the matched text.
	 * 
	 * It is equivalent to yytext().charAt(pos), but faster
	 *
	 * @param pos the position of the character to fetch. A value from 0 to
	 *            yylength()-1.
	 *
	 * @return the character at position pos
	 */
	public final char yycharat(int pos) {
		return zzBuffer[zzStartRead + pos];
	}

	/**
	 * Returns the length of the matched text region.
	 */
	public final int yylength() {
		return zzMarkedPos - zzStartRead;
	}

	/**
	 * Reports an error that occured while scanning.
	 *
	 * In a wellformed scanner (no or only correct usage of yypushback(int) and a
	 * match-all fallback rule) this method will only be called with things that
	 * "Can't Possibly Happen". If this method is called, something is seriously
	 * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
	 *
	 * Usual syntax/scanner level error handling should be done in error fallback
	 * rules.
	 *
	 * @param errorCode the code of the errormessage to display
	 */
	private void zzScanError(int errorCode) {
		String message;
		try {
			message = ZZ_ERROR_MSG[errorCode];
		} catch (ArrayIndexOutOfBoundsException e) {
			message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
		}

		throw new Error(message);
	}

	/**
	 * Pushes the specified amount of characters back into the input stream.
	 *
	 * They will be read again by then next call of the scanning method
	 *
	 * @param number the number of characters to be read again. This number must not
	 *               be greater than yylength()!
	 */
	public void yypushback(int number) {
		if (number > yylength())
			zzScanError(ZZ_PUSHBACK_2BIG);

		zzMarkedPos -= number;
	}

	/**
	 * Resumes scanning until the next regular expression is matched, the end of
	 * input is encountered or an I/O-Error occurs.
	 *
	 * @return the next token
	 * @exception java.io.IOException if any I/O-Error occurs
	 */
	public ZPrologToken getNextToken() throws java.io.IOException {
		int zzInput;
		int zzAction;

		// cached fields:
		int zzCurrentPosL;
		int zzMarkedPosL;
		int zzEndReadL = zzEndRead;
		char[] zzBufferL = zzBuffer;
		char[] zzCMapL = ZZ_CMAP;

		int[] zzTransL = ZZ_TRANS;
		int[] zzRowMapL = ZZ_ROWMAP;
		int[] zzAttrL = ZZ_ATTRIBUTE;

		while (true) {
			zzMarkedPosL = zzMarkedPos;

			yychar += zzMarkedPosL - zzStartRead;

			boolean zzR = false;
			int zzCh;
			int zzCharCount;
			for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL += zzCharCount) {
				zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
				zzCharCount = Character.charCount(zzCh);
				switch (zzCh) {
				case '\u000B':
				case '\u000C':
				case '\u0085':
				case '\u2028':
				case '\u2029':
					yyline++;
					yycolumn = 0;
					zzR = false;
					break;
				case '\r':
					yyline++;
					yycolumn = 0;
					zzR = true;
					break;
				case '\n':
					if (zzR)
						zzR = false;
					else {
						yyline++;
						yycolumn = 0;
					}
					break;
				default:
					zzR = false;
					yycolumn += zzCharCount;
				}
			}

			if (zzR) {
				// peek one character ahead if it is \n (if we have counted one
				// line too much)
				boolean zzPeek;
				if (zzMarkedPosL < zzEndReadL)
					zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				else if (zzAtEOF)
					zzPeek = false;
				else {
					boolean eof = zzRefill();
					zzEndReadL = zzEndRead;
					zzMarkedPosL = zzMarkedPos;
					zzBufferL = zzBuffer;
					if (eof)
						zzPeek = false;
					else
						zzPeek = zzBufferL[zzMarkedPosL] == '\n';
				}
				if (zzPeek)
					yyline--;
			}
			zzAction = -1;

			zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

			zzState = ZZ_LEXSTATE[zzLexicalState];

			// set up zzAction for empty match case:
			int zzAttributes = zzAttrL[zzState];
			if ((zzAttributes & 1) == 1) {
				zzAction = zzState;
			}

			zzForAction: {
				while (true) {

					if (zzCurrentPosL < zzEndReadL) {
						zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
						zzCurrentPosL += Character.charCount(zzInput);
					} else if (zzAtEOF) {
						zzInput = YYEOF;
						break zzForAction;
					} else {
						// store back cached positions
						zzCurrentPos = zzCurrentPosL;
						zzMarkedPos = zzMarkedPosL;
						boolean eof = zzRefill();
						// get translated positions and possibly new buffer
						zzCurrentPosL = zzCurrentPos;
						zzMarkedPosL = zzMarkedPos;
						zzBufferL = zzBuffer;
						zzEndReadL = zzEndRead;
						if (eof) {
							zzInput = YYEOF;
							break zzForAction;
						} else {
							zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
							zzCurrentPosL += Character.charCount(zzInput);
						}
					}
					int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
					if (zzNext == -1)
						break zzForAction;
					zzState = zzNext;

					zzAttributes = zzAttrL[zzState];
					if ((zzAttributes & 1) == 1) {
						zzAction = zzState;
						zzMarkedPosL = zzCurrentPosL;
						if ((zzAttributes & 8) == 8)
							break zzForAction;
					}

				}
			}

			// store back cached position
			zzMarkedPos = zzMarkedPosL;

			switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
			case 1: {
				yybegin(ERRORSTATE);
				return token(TOKEN_ERROR, yytext());
			}
			case 63:
				break;
			case 2: {
				return token(TOKEN_CARRIAGE_RETURN, yytext());
			}
			case 64:
				break;
			case 3: {
				return token(TOKEN_NEW_LINE, yytext());
			}
			case 65:
				break;
			case 4: {
				if (builtins.containsKey(yytext())) {
					return token(builtins.get(yytext()), yytext());
				}
				return token(TOKEN_ATOM, yytext());
			}
			case 66:
				break;
			case 5: {
				return token(TOKEN_INTEGER, yytext());
			}
			case 67:
				break;
			case 6: {
				return token(TOKEN_FORM_FEED, yytext());
			}
			case 68:
				break;
			case 7: {
				return operator(TOKEN_BITWISE_COMPLEMENT, yytext(), 200, FY);
			}
			case 69:
				break;
			case 8: {
				return token(TOKEN_VARIABLE, yytext());
			}
			case 70:
				break;
			case 9: {
				return token(TOKEN_DOT, yytext());
			}
			case 71:
				break;
			case 10: {
				return token(TOKEN_TAB, yytext());
			}
			case 72:
				break;
			case 11: {
				return operator(TOKEN_DIV, yytext(), 400, YFX);
			}
			case 73:
				break;
			case 12: {
				return operator(TOKEN_TIMES, yytext(), 400, YFX);
			}
			case 74:
				break;
			case 13: { /* ignore */
			}
			case 75:
				break;
			case 14: {
				return token(TOKEN_CUT, yytext());
			}
			case 76:
				break;
			case 15: {
				return token(TOKEN_BAR, yytext());
			}
			case 77:
				break;
			case 16: {
				return token(TOKEN_LPAR, yytext());
			}
			case 78:
				break;
			case 17: {
				return token(TOKEN_RPAR, yytext());
			}
			case 79:
				break;
			case 18: {
				return token(TOKEN_LBRACKET, yytext());
			}
			case 80:
				break;
			case 19: {
				return token(TOKEN_RBRACKET, yytext());
			}
			case 81:
				break;
			case 20: {
				return token(TOKEN_LCURLY, yytext());
			}
			case 82:
				break;
			case 21: {
				return token(TOKEN_RCURLY, yytext());
			}
			case 83:
				break;
			case 22: {
				return token(TOKEN_ATOM, yytext());
			}
			case 84:
				break;
			case 23: {
				return operator(TOKEN_MINUS, yytext(), 500, YFX);
			}
			case 85:
				break;
			case 24: {
				return operator(TOKEN_SEMICOLON, yytext(), 1100, XFY);
			}
			case 86:
				break;
			case 25: {
				return operator(TOKEN_GREATER, yytext(), 700, XFX);
			}
			case 87:
				break;
			case 26: {
				return operator(TOKEN_COMMA, yytext(), 1000, XFY);
			}
			case 88:
				break;
			case 27: {
				return operator(TOKEN_PLUS, yytext(), 500, YFX);
			}
			case 89:
				break;
			case 28: {
				return operator(TOKEN_UNIFY, yytext(), 700, XFX);
			}
			case 90:
				break;
			case 29: {
				return operator(TOKEN_LESS, yytext(), 700, XFX);
			}
			case 91:
				break;
			case 30: {
				return operator(TOKEN_INT_FLOAT_POW, yytext(), 200, XFY);
			}
			case 92:
				break;
			case 31: {
				return token(TOKEN_ANONIM, yytext());
			}
			case 93:
				break;
			case 32: {
				return token(TOKEN_SPACE, yytext());
			}
			case 94:
				break;
			case 33: {
				return token(TOKEN_WORD_BOUNDARY, yytext());
			}
			case 95:
				break;
			case 34: {
			}
			case 96:
				break;
			case 35: {
				yybegin(NORMALSTATE);
				return token(TOKEN_DOT, yytext());
			}
			case 97:
				break;
			case 36: {
				return operator(TOKEN_BITWISE_OR, yytext(), 500, YFX);
			}
			case 98:
				break;
			case 37: {
				return operator(TOKEN_NOT, yytext(), 900, FY);
			}
			case 99:
				break;
			case 38: {
				return operator(TOKEN_NOT_UNIFY, yytext(), 700, XFX);
			}
			case 100:
				break;
			case 39: {
				return operator(TOKEN_BITWISE_AND, yytext(), 500, YFX);
			}
			case 101:
				break;
			case 40: {
				return operator(TOKEN_INTEGER_DIV, yytext(), 400, YFX);
			}
			case 102:
				break;
			case 41: {
				return operator(TOKEN_FLOAT_POW, yytext(), 200, XFX);
			}
			case 103:
				break;
			case 42: {
				return operator(TOKEN_QUERY, yytext(), 1200, FX);
			}
			case 104:
				break;
			case 43: {
				return operator(TOKEN_IF_THEN, yytext(), 1050, XFY);
			}
			case 105:
				break;
			case 44: {
				return operator(TOKEN_NECK, yytext(), 1200, XFX);
			}
			case 106:
				break;
			case 45: {
				return operator(TOKEN_BITWISE_SHIFT_RIGHT, yytext(), 400, YFX);
			}
			case 107:
				break;
			case 46: {
				return operator(TOKEN_GREATER_EQUAL, yytext(), 700, XFX);
			}
			case 108:
				break;
			case 47: {
				return operator(TOKEN_BITWISE_XOR, yytext(), 500, YFX);
			}
			case 109:
				break;
			case 48: {
				return operator(TOKEN_EQUIVALENT, yytext(), 700, XFX);
			}
			case 110:
				break;
			case 49: {
				return operator(TOKEN_LESS_EQUAL, yytext(), 700, XFX);
			}
			case 111:
				break;
			case 50: {
				return operator(TOKEN_BITWISE_SHIFT_LEFT, yytext(), 400, YFX);
			}
			case 112:
				break;
			case 51: {
				return operator(TOKEN_IS, yytext(), 700, XFX);
			}
			case 113:
				break;
			case 52: {
				return operator(TOKEN_AFTER, yytext(), 700, XFX);
			}
			case 114:
				break;
			case 53: {
				return operator(TOKEN_BEFORE, yytext(), 700, XFX);
			}
			case 115:
				break;
			case 54: {
				return token(TOKEN_FLOAT, yytext());
			}
			case 116:
				break;
			case 55: {
				return operator(TOKEN_NOT_EQUIVALENT, yytext(), 700, XFX);
			}
			case 117:
				break;
			case 56: {
				return operator(TOKEN_NOT_EQUAL, yytext(), 700, XFX);
			}
			case 118:
				break;
			case 57: {
				return operator(TOKEN_UNIV, yytext(), 700, XFX);
			}
			case 119:
				break;
			case 58: {
				return operator(TOKEN_EQUAL, yytext(), 700, XFX);
			}
			case 120:
				break;
			case 59: {
				return operator(TOKEN_AFTER_EQUALS, yytext(), 700, XFX);
			}
			case 121:
				break;
			case 60: {
				return operator(TOKEN_BEFORE_EQUALS, yytext(), 700, XFX);
			}
			case 122:
				break;
			case 61: {
				return operator(TOKEN_REM, yytext(), 400, YFX);
			}
			case 123:
				break;
			case 62: {
				return operator(TOKEN_MOD, yytext(), 400, YFX);
			}
			case 124:
				break;
			default:
				if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
					zzAtEOF = true;
					{
						return token(TOKEN_EOF, "EOF");
					}
				} else {
					zzScanError(ZZ_NO_MATCH);
				}
			}
		}
	}

}
